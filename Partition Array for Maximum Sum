class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int n = arr.length;
        int dp[] =  new int[n];
        Arrays.fill(dp , -1);
        return func(0, n , k , arr , dp);
    }
    public int func(int i , int n , int k , int arr[] , int dp[]) {
        if(i == n)
             return 0;
        if(dp[i] != -1) return dp[i];                                                               //Memoization Approach
        int len = 0;
        int maxi =(int) Math.pow(-10,9);
        int maxAns = 0;
        int lim = Math.min(n,i+k);
        int sum = 0; 
        for(int j = i; j<lim ; j++){
            len++;
            maxi = Math.max(maxi,  arr[j]);
            sum = (len * maxi) +  func(j+1 , n , k, arr , dp);
            maxAns = Math.max(maxAns , sum);
        }
        return dp[i] = maxAns;
    }
}

class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int n = arr.length;
        int dp[] =  new int[n+1];
        Arrays.fill(dp , 0);
        
        for(int i = n-1; i>=0; i--)   {
             if(i == n)
                return 0;               
             int maxi =(int) Math.pow(-10,9);
             int len  = 0;
             int maxAns = 0;
             int lim = Math.min(n,i+k);                                                 //Tabulation Approach
             int sum = 0; 
             for(int j = i; j<lim ; j++){
                    len++;
                    maxi = Math.max(maxi,  arr[j]);
                    sum = (len * maxi) +  dp[j+1];
                    maxAns = Math.max(maxAns , sum);
        }
            dp[i] = maxAns;
        }
        
        return dp[0];
    }
