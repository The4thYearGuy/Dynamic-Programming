class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n][n+1];
        for(int[] row : dp)
            Arrays.fill(row ,-1);                                                       // Memoization approach
        return func(0 , -1 , nums, n , dp);
    }
    public int func(int ind, int prev_ind, int[] arr , int n, int dp[][])   {
        if(ind == n)return 0;
        if(dp[ind][prev_ind+1] != -1) return dp[ind][prev_ind+1];
        
        int len = 0 + func(ind+1, prev_ind, arr, n , dp ); // nottake
        
        if(prev_ind == -1 || arr[ind] > arr[prev_ind])
            len = Math.max(len , 1 + func(ind+1 , ind , arr, n, dp)); // take
        
        return dp[ind][prev_ind+1] = len ;      // returning the max of both cases
    }
}

class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int dp[][] = new int[n+1][n+1];                                                         // tabulation approach
        for(int[] row : dp)
            Arrays.fill(row ,0);
        
        for(int ind = n-1; ind>=0; ind--){
            for(int prev_ind = ind-1; prev_ind >=-1; prev_ind--){
                  int len = 0 + dp[ind+1][prev_ind+1]; // nottake
                if(prev_ind == -1 || nums[ind] > nums[prev_ind])
                  len = Math.max(len , 1 + dp[ind+1][ind+1]); // take
                dp[ind][prev_ind+1]  = len;
            }
        }
        return dp[0][0];
    }
