public class Solution {
    public static int mod = 1000000007;
    public static int evaluateExp(String exp) {
       int n = exp.length();
        int dp[][][] = new int [n][n][2];
        for(int row= 0; row<n;row++)
           for(int col = 0; col<n;col++)
               for(int i=0; i<2; i++)
                   dp[row][col][i] = -1;
        return func(0, exp.length() -1 , 1, exp ,dp);
    }
    public static int func(int i , int j ,  int isTrue, String exp , int dp[][][])    {
        if(i>j) return 0; 
        if(i == j ){
          if(isTrue == 1){
              if(exp.charAt(i) == 'T')
                  return 1;
              else
                  return 0;
          }
         else 
         {if(exp.charAt(i) == 'F')
                  return 1;
              else                                                                                                //Memoized Approach
                  return 0;
        }
        }
        if(dp[i][j][isTrue] != -1) return (int) dp[i][j][isTrue];
        int ways = 0;
        for(int ind = i+1; ind<=j-1; ind+=2){
         long lT = func(i , ind-1, 1 , exp , dp);
         long lF = func(i , ind-1 , 0 , exp,dp);
         long rT = func(ind+1, j , 1, exp,dp);
         long rF = func(ind+1 , j , 0 , exp,dp);
        
        if(exp.charAt(ind) == '&'){
            if(isTrue == 1)
                ways =(int) (ways + (rT*lT) % mod) % mod;
            else
                ways = (int)(ways + (rT*lF) % mod + (lF*rF) % mod + (rF * lT) % mod) % mod;
        }
        else if (exp.charAt(ind) == '|'){
            if(isTrue == 1)
               ways = (int)(ways + (rT*lF) % mod + (lT*rT) % mod + (rF * lT) % mod) % mod;
            else
                 ways =(int) (ways + (rF*lF) % mod) % mod; 
        }
            
        else    {
            if(isTrue == 1)
                ways = (int)(ways + (rF*lT) % mod + (rT*lF) % mod) % mod;
            else
                ways = (int)(ways + (rF*lF) % mod + (rT * lT) % mod) % mod;   
               }
        }
        
        return dp[i][j][isTrue] = ways;
    }
}
