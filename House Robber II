import java.util.*; 
import java.io.*; 
import java.util.Arrays; 
class Solution { 
    public int rob(int[] valueInHouse) { 
        List<Integer> arr = new ArrayList<Integer>(valueInHouse.length);                    // Continuation approach of maximum non-adjacent sum and some minor modification
        for (int i : valueInHouse)                                                          // Here first element is not picked once and then the last element is not picked
        {                                                                                   // so that the adjacent cases can be adjusted as it is a circular manner.
         arr.add(i);                                                                        // the code looks complex as the type was given as int[] but I changed it to ArrayList
        } 
        int n= arr.size(); 
        ArrayList<Integer> arr1=new ArrayList<>(); 
    ArrayList<Integer> arr2=new ArrayList<>(); 
    if(n==1) 
        return arr.get(0); 
    for(int i=0; i<n; i++){ 
         
        if(i!=0) arr1.add(arr.get(i)); 
        if(i!=n-1) arr2.add(arr.get(i)); 
    } 
     
    long ans1 = solve(arr1); 
    long ans2 = solve(arr2); 
     
    return (int)Math.max(ans1,ans2); 
         
    } 
    static long solve(ArrayList<Integer> arr){ 
    int n = arr.size();                                                     // Same as Maximum sum of non adjacent elements
    long prev = arr.get(0); 
    long prev2 =0; 
     
    for(int i=1; i<n; i++){ 
        long pick = arr.get(i); 
        if(i>1) 
            pick += prev2; 
        long nonPick = 0 + prev; 
         
        long cur_i = Math.max(pick, nonPick); 
        prev2 = prev; 
        prev= cur_i; 
         
    } 
    return prev; 
} 
}
