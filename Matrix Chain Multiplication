import java.util.*;
public class Solution {
	public static int matrixMultiplication(int[] arr , int N) {
        int dp[][] = new int[N][N];
        for( int row[] : dp)
            Arrays.fill(row, -1);
        return func(1,N-1 , arr , dp);
        }
    
    public static int func(int i ,int j, int arr[] , int dp[][])    {
        if(i == j) return 0;                                                                              //Memoization Approach
        if(dp[i][j] != -1) return dp[i][j];
        int mini = (int)Math.pow(10,9);
        for(int k = i; k<j ; k++){
            int steps =  arr[i-1] * arr[k] * arr[j] + func(i , k , arr, dp) + 
                func(k+1, j, arr, dp);
            if( steps < mini) mini =  steps;
        }
         return dp[i][j] = mini;
    }
}

import java.util.*;
public class Solution {
	public static int matrixMultiplication(int[] arr , int N) {
        int dp[][] = new int[N+2][N+2];
        for( int row[] : dp)
            Arrays.fill(row, 0);
//         int mini = (int)Math.pow(10,9);                                                                // Tabulated Approach
        for(int a = N-1; a>0; a--){
            for(int b = a+1 ; b<N; b++){
                int mini = (int)Math.pow(10,9);
                for(int k = a; k<b; k++){
                int steps =  arr[a-1] * arr[k] * arr[b] + dp[a][k] + dp[k+1][b];
                if( steps < mini) mini =  steps;
             }
            dp[a][b] = mini;
        }
     }
         return dp[1][N-1];
        }
