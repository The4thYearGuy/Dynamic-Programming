import java.util.*;
class Solution {
    public int longestStrChain(String[] nums) {
            int n = nums.length;
            Arrays.sort(nums, new SortbyLen());
            int dp[] = new int[n];
            int max = 1;
            
            for(int i=0;i<n;i++)
            {
                dp[i] = 1;
                for(int j=0;j<i;j++)
                {
                    if(checkPossible(nums[i], nums[j]) )
                    {
                        if(dp[i]<dp[j]+1)
                        {
                            dp[i]  = dp[j] +1;
                        }
                    }
                }
                if(max<dp[i]){
                    max = dp[i];
                }
            }
        return max;
    }
    
    public boolean checkPossible(String s1, String s2) {
        if(s1.length() != s2.length()+1)
            return false;
        int first = 0;
        int second= 0;
        
        while(first < s1.length())
        {
            if(second < s2.length() && s1.charAt(first) == s2.charAt(second)){
                first++;
                second++;
                }
            else {
             first++;   
            }
        }
        
        if(first == s1.length() && second == s2.length()) return true;
        
        return false;   
    }
}

class SortbyLen implements Comparator<String> { 
    public int compare(String a, String b) 
    { 
        return a.length() - b.length(); 
    } 
} 
