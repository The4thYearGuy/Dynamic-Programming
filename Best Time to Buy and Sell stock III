class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n][2][3]; //2- Buy stocks 3- cap of Transactions                           // Very bad appraoch in terms of acceptance: used 144mb memory and 376ms on leetcode
        for(int i = 0; i<n;i++)                                                                       // should use tabulation or space optimized always
            for(int j = 0; j<2;j++)
                for(int k  = 0;k<3;k++)
                    dp[i][j][k] = -1;
        return f(0,1,2,prices, dp ,n);
    }
    public int f(int ind, int buy, int cap, int prices[],int dp[][][],int n )  {
        if(ind == n || cap == 0)return 0;
        
        if(dp[ind][buy][cap] != -1) return dp[ind][buy][cap];
        
        if(buy == 1)
          return  dp[ind][buy][cap] = Math.max((-prices[ind] + f(ind+1 , 0 , cap, prices , dp ,n)),0+ f(ind+1 , 1 , cap , prices, dp, n)) ;
        
      return  dp[ind][buy][cap] = Math.max((prices[ind] + f(ind+1,1,cap-1, prices ,dp ,n)), 0 + f(ind+1 ,0 , cap,prices , dp ,n));
}
}

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][][] = new int[n+1][2][3]; //2- Buy stocks 3- cap of Transactions
        for(int i = 0; i<n;i++)
            for(int j = 0; j<2;j++)
                for(int k  = 0;k<3;k++)
                    dp[i][j][k] = 0;
        
//         for( int ind = 0; ind<=n; ind++)
//             for(int buy = 0; buy<=1;buy++)
//                 dp[ind][buy][cap] = 0;                                           // Can omit writing the base cases as the dp array is already intialized with 0
        
//         for( int buy= 0; buy<=1; buy++)                                          // Works fine but still needs space optimization
//             for(int cap = 0; cap<=2;cap++)
//                 dp[ind][buy][cap] = 0;
        
        for( int ind = n-1; ind>=0; ind--)
            for(int buy = 0; buy<=1;buy++)
                for(int cap = 1; cap<=2; cap++){
                    if(buy == 1)
                             dp[ind][buy][cap] = Math.max(-prices[ind] + dp[ind+1][0][cap],0+ dp[ind+1][1][cap]) ;
                    else
                         dp[ind][buy][cap] = Math.max((prices[ind] + dp[ind+1][1][cap-1]), 0 + dp[ind+1][0][cap]);
                }
        return dp[0][1][2];
       
    }
    
    
    class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int ahead[][] = new int[2][3];                                                          // Space optimized approach, can also be further optimized by using N x 4 dp array 
        int curr[][] = new int[2][3]; //2- Buy stocks 3- cap of Transactions                      // and counting for transactions: if even- buy: if odd: we sell--- good approach
          for(int row[] : ahead)
              Arrays.fill(row , 0);
        for(int row[] : curr)
              Arrays.fill(row , 0);
//         for( int ind = 0; ind<=n; ind++)
//             for(int buy = 0; buy<=1;buy++)
//                 dp[ind][buy][cap] = 0;
        
//         for( int buy= 0; buy<=1; buy++)
//             for(int cap = 0; cap<=2;cap++)
//                 dp[ind][buy][cap] = 0;
        
        for( int ind = n-1; ind>=0; ind--)  {
            for(int buy = 0; buy<=1;buy++)  {
                for(int cap = 1; cap<=2; cap++){
                    if(buy == 1)
                             curr[buy][cap] = Math.max(-prices[ind] + ahead[0][cap],0+ ahead[1][cap]) ;
                    else
                         curr[buy][cap] = Math.max((prices[ind] + ahead[1][cap-1]), 0 + ahead[0][cap]);
                }
            }
      ahead = curr;
       
    }
        
    return ahead[1][2];
   }
