class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        return countPartitions(n,target,nums);
    }
	public static int countPartitions(int n, int D, int[] num) {
      int totSum = 0;
      for(int i=0; i<n;i++)
          totSum += num[i];
        
        if((totSum - D)<0 || (totSum - D) % 2 ==1) return 0;
        
        return findways(num,(totSum-D)/2);
    }
    public static int findways(int[] arr, int tar){
        int n = arr.length;
        int[][] dp = new int[n][tar+1];
         if(arr[0] == 0) dp[0][0] =2;                                 // 2 cases -pick and not pick
         else dp[0][0] = 1;                                            // 1 case - not pick
    
          if(arr[0]!=0 && arr[0]<=tar) dp[0][arr[0]] = 1;
    
        for(int i = 1; i<n; i++){
            for(int target = 0;target<=tar; target++){
                int notPick = dp[i-1][target];
                int pick =0;
                    if(arr[i]<=target)
                        pick = dp[i-1][target - arr[i]];
                dp[i][target] = (pick + notPick);
            }
        }
        return dp[n-1][tar];      
    }
}
