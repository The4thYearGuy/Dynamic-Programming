public class Solution {
	public static int minSubsetSumDifference(int[] a, int n) {
        int totSum = 0;
        for(int i= 0; i<n; i++)
            totSum += a[i];
        int k = totSum;
        boolean[][] dp =  new boolean[n][k+1];
       
       for(int ind = 0; ind<n;ind++)                                                          // Base cases for the problem
         dp[ind][0] = true; 
        if(a[0]<=k)                                                     
         dp[0][a[0]] = true;
         for(int i = 1; i<n;i++){                                                           // Tabulation approach
             for(int target = 1; target<=k;target++){
                 boolean notTake = dp[i-1][target];
                 boolean Take = false;
                 if(target>=a[i])
                     Take = dp[i-1][target - a[i]];                                           // Decreasing target if taking the value
                 dp[i][target] = notTake||Take;
             }
         }
       
         int mini =(int) 1e9;
        for(int s1= 0; s1<= totSum/2; s1++)
            if(dp[n-1][s1]== true)                                                            // Checking for minimum sum
            mini= Math.min(mini, Math.abs((totSum - s1) - s1));
        return mini;
}
}
