class Solution {
    public int longestPalindromeSubseq(String s) {
        String newstr ="";
        for(int i = 0;i<s.length(); i++){
            char c = s.charAt(i);
            newstr = c + newstr;
    }
        
        return largestCommonSubsequence(s , newstr); 
    }
    public int largestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        
        int[][] dp = new int[m+1][n+1];
        
        for(int i= 0; i<=m ; i++)
            dp[i][0] = 0;
        
        for(int j=0; j<=n; j++)
            dp[0][j] =0;
        
        for(int i =1;i<=m; i++){
            for(int j = 1; j<=n; j++){
                //if(i<0 || j<0) return 0;
                if(text1.charAt(i-1) == text2.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = 0 + Math.max(dp[i-1][j] , dp[i][j-1]);
            }
        }
       return dp[m][n];     
}
}
