class Solution {
    public int maxProfit(int[] Arr) {
        int n = Arr.length;
        int dp[][] = new int[n+1][2];
        for(int[] row: dp)
            Arrays.fill(row, -1);
        int profit = 0;
        dp[n][0] = dp[n][1] = 0;
        
        for(int ind = n-1; ind>=0; ind--){
            for(int buy=0; buy<=1; buy++){
                if(buy==0){// We can buy the stock
                    profit = Math.max(0+dp[ind+1][0], -Arr[ind] + dp[ind+1][1]);
                }

                if(buy==1){// We can sell the stock
                    profit = Math.max(0+dp[ind+1][1], Arr[ind] + dp[ind+1][0]);
                }

                dp[ind][buy]  = profit;
        }
    }
    return dp[0][0];
}
}


class Solution {
    public int maxProfit(int[] Arr) {
        int n = Arr.length;
        
        int curNotBuy, curBuy , aheadBuy , aheadNotBuy;                               //Space optimised with 4variables, Beautiful approach
        aheadBuy = 0 ; aheadNotBuy = 0;
    
        for(int ind = n-1; ind>=0; ind--){
            
            curNotBuy =  Math.max(Arr[ind] + aheadBuy , aheadNotBuy);
            
            curBuy = Math.max(-Arr[ind] + aheadNotBuy , aheadBuy);
           
            aheadBuy =  curBuy;
            aheadNotBuy = curNotBuy;
        }
        return aheadBuy;
}
}
