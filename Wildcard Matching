class Solution {
    static boolean isAllStars(String S1, int i) {

    // S1 is taken in 1-based indexing
    for (int j = 1; j <= i; j++) {
      if (S1.charAt(j - 1) != '*')                                      // Check if s1 has remaining stars in full remaining s1
        return false;
    }
    return true;
  }

  static boolean isMatch(String s2, String s1) {

    int n = s1.length();
    int m = s2.length();

    boolean dp[][] = new boolean[n + 1][m + 1];
    dp[0][0] = true;

    for (int j = 1; j <= m; j++) {
      dp[0][j] = false;
    }
    for (int i = 1; i <= n; i++) {
      dp[i][0] = isAllStars(s1, i);                                                 // Tabulation Approach
    }

    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= m; j++) {

        if (s1.charAt(i - 1) == s2.charAt(j - 1) || s1.charAt(i - 1) == '?')
          dp[i][j] = dp[i - 1][j - 1];

        else {
          if (s1.charAt(i - 1) == '*')
            dp[i][j] = dp[i - 1][j] || dp[i][j - 1];

          else dp[i][j] = false;
        }
      }
    }

    return dp[n][m];

  }

    /*public boolean func(int i, int j, String s1, String s2, boolean[][] dp ) {
        if(i<0 && j<0) return true;
        if(i<0 && j>=0) return false;
        if(j<0 && i>=0)
        {
            for(int k = 0; k<=i; k++)                                                       // Memoization approach
                if(s1.charAt(k) != '*')
                    return false;
            return true;
        }
        if(dp[i][j] != -1) return dp[i][j];
        
        if(s1.charAt(i) == s2.charAt(j) || s1.charAt(i) == '?') return dp[i][j] = func(i-1,j-1,s1,s2,dp);
        
        if(s1.charAt(i) == '*')
            return dp[i][j] = func(i-1,j,s1,s2,dp) || func(i,j-1,s1,s2,dp);
        
        return dp[i][j] = false;
    }*/
